61. Rotate List

Given the head of a linked list, rotate the list to the right by k places.

Example 1:

Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:

Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        ListNode* temp=head;
        int len=1;
        if(!temp || temp->next==NULL || k==0)
            return head;
        
        while(temp->next!=NULL)
            {
                len++;
                temp=temp->next;
            }

        k=k%len;
        if(k==0)
            return head;

        for(int i=0;i<k;i++)
            {
                temp=head;
                while(temp->next->next!=NULL)
                    temp=temp->next;
                
                temp->next->next=head;
                head=temp->next;
                temp->next=NULL;
            }
        return head;
    }
};
