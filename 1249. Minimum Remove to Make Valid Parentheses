1249. Minimum Remove to Make Valid Parentheses

Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
 

Constraints:

1 <= s.length <= 105
s[i] is either'(' , ')', or lowercase English letter.


class Solution {
public:
    string minRemoveToMakeValid(string s) {
        int braces=0;
        for(int i=0;i<s.length();i++){
            if(s[i]=='(') braces++;
            else if(s[i]==')'){
                if(braces>0) braces--;
                else s[i]='$';
            }
        }

        for(int i=s.length()-1;i>=0 && braces>0;i--){
            if(s[i]=='('){
                s[i]='$';
                braces--;
            }
            
        }

        string result;
        for(int i=0;i<s.length();i++){
            if(s[i]!='$')
                result += s[i];
        }
        return result;
    }
};
