19. Remove Nth Node From End of List

Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:

Input: head = [1], n = 1
Output: []

Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* fast=head;
        ListNode* slow=head;

        for(int i=0;i<n;i++)
            fast=fast->next;

        if(!fast) return head->next;

        while(fast && fast->next){
            fast=fast->next;
            slow=slow->next;
        }

        ListNode* delnode=slow->next;
        if(slow->next)
            slow->next=slow->next->next;
        else 
            slow->next=nullptr;
        delete delnode;
        return head;
    }
};
