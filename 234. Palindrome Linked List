234. Palindrome Linked List

Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

 

Example 1:

Input: head = [1,2,2,1]
Output: true

Example 2:

Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9

class Solution {
public:

    ListNode* reverseList(ListNode* newList) {
        if(!newList || !newList->next) return newList;
        ListNode* current=newList;
        ListNode* prev=NULL;
        ListNode* next;
        while(current){
            next=current->next;
            current->next=prev;
            prev=current;
            current=next;
        }
        newList=prev;
        return newList;
    }

    bool isPalindrome(ListNode* head) {
        ListNode* fast=head;
        ListNode* slow=head;

        while(fast && fast->next){
            fast=fast->next->next;
            slow=slow->next;
        }

        ListNode* reversed=reverseList(slow);

        ListNode* temp=head;
        while(temp!=slow && reversed!=nullptr){
            if(temp->val!=reversed->val)
                return false;
            temp=temp->next;
            reversed=reversed->next;
        }
        return true;
    }
};
