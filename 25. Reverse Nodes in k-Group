25. Reverse Nodes in k-Group

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.


Example 1:

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:

Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000


class Solution {
public:

    ListNode* reverse(ListNode* head){
        ListNode* current=head;
        ListNode* prev=nullptr;
        ListNode* next;

        while(current){
            next=current->next;
            current->next=prev;
            prev=current;
            current=next;
        }
        return prev; 
    }

    ListNode* findk(ListNode* temp, int k){
        k--;
        while(temp && k>0){
            k--;
            temp=temp->next;
        }
        return temp; 
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp=head;
        ListNode* nextnode=nullptr;
        ListNode* prevnode=nullptr;
        while(temp){
            ListNode* kthnode=findk(temp, k);
            if(kthnode==nullptr){
                if(prevnode)
                    prevnode->next=temp;
                break;
            }
            nextnode=kthnode->next;
            kthnode->next=nullptr;
            ListNode* reversed = reverse(temp);
            if(temp==head)
                head=kthnode;
            else
                prevnode->next=kthnode;
            prevnode=temp;
            temp=nextnode;
        }
        return head;
    }
};
